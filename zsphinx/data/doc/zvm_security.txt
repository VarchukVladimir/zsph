This document describes ZeroVM security, how ZeroVM stands against possible attacks
-----------------------------------------------------------------------------------

We assume that original NaCl implementation is perfect and will analyze only the 
ZeroVM features that can affect the system security.

trap()
------
The trap() syscall contains several functions each of them can have bugs that lead to security
vulnerability. Therefore each trap() function must have full test coverage. Tests can be
found in repository folder /tests/functional/

Other zerovm code
-----------------
Most dangerous are the functions that work when user application is running. These are: syscalls,
nacl_syscall_64.S, nacl_switch_64.S nacl_syscall_hook.c and some other code. All this code should
be covered with security tests. Some tests can be found in repository folder /tests/security 

Loader
--------
ZeroVM has some changes in user module loading process:
1. a new memory region added: user manifest. this is a read only memory area placed right 
   before the user stack. user manifest contains information about channels, heap and stack
2. all trampoline syscalls are disabled (except trap) and populated by the uniform pattern
   calling always constant memory address 0x5afeca110000
3. command line arguments, environment and modulle name is not available from the user stack
   (actually it is avaiilable, but will be removed as soon as "/dev/nvram" will be added)
   it is more safe to allow user module to parse all its command data on untrusted side.
   appropriate support will be added to zerovm toolchain

Network channels
----------------
to send user data from one session to other, zerovm uses zeromq library v2.2.x. 

Manifest
--------
Current version of the manifest is treated as secure. User can only view/change specific fields. However
security tests will be useful.
